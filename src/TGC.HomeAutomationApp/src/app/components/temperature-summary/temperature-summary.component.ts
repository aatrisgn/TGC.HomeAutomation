import { Component } from '@angular/core';
import { ApexOptions, NgApexchartsModule } from 'ng-apexcharts';
import { MeasureClient } from 'src/app/generated/autogenerated-client';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { DateTimeComponent } from "../date-time/date-time.component";

@Component({
  selector: 'app-temperature-summary',
  standalone: true,
  imports: [NgApexchartsModule, SharedModule, DateTimeComponent],
  providers: [MeasureClient],
  templateUrl: './temperature-summary.component.html',
  styleUrl: './temperature-summary.component.scss'
})

export class TemperatureSummaryComponent {

  startDate: Date = new Date();
  endDate: Date = new Date();

  summaryChart: ApexOptions = {
    chart: {
      height: 350,
      type: 'area'
    },
    dataLabels: {
      enabled: false
    },
    series: [],
    stroke: {
      curve: 'smooth'
    },
    xaxis: {
      type: 'datetime',
      labels: {
        formatter: function (value: string) {
          const date = new Date(value);
          return date.toLocaleString('en-DK'); // e.g., "11/05/2025"
        }
      }
    },
    yaxis: {
      labels: {
        formatter: (val: number) => val.toFixed(0) // 1 decimal place
      }
    },
    tooltip: {
      x: {
        format: 'dd/MM/yy HH:mm'
      },
      y: {
        formatter: (val: number) => val.toFixed(1) // 1 decimal place
      }
    }
  };

  constructor(private measureClient: MeasureClient) {
    this.startDate = new Date(this.endDate.getTime() - 24 * 60 * 60 * 1000);
    this.reloadData();
  }

  onDateChange(date:Date):void{
    this.reloadData();
  }

  private reloadData():void {
    this.summaryChart.series = []; //Resetting data for now. Not ideal, but kinda works, lol.
    this.plotMeasureData("temperature");
    this.plotMeasureData("humidity");
    this.plotMeasureData("co2");
  }

  private plotMeasureData(measureType:string):void {
    this.measureClient.getMeasuresByDate(measureType, this.startDate, this.endDate).subscribe(data => {

      let formattedResponse = data.dataValues?.map(data => {
        return {
          y: data.dataValue!,
          x: data.created!
        }
      });

      this.addToChartSeries(measureType, formattedResponse!)
    });
  }

  private addToChartSeries(seriesName:string, data:any):void {
    var some = [...this.summaryChart.series as [], {
      name: seriesName,
      data: data
    }];

    this.summaryChart.series = some;
  }
}
