import { Injectable } from "@angular/core";
import * as signalR from '@microsoft/signalr';
import { firstValueFrom, Observable } from 'rxjs';
import { ConfigurationLoaderService } from "./ConfigurationLoaderService";
import { MeasureRequest } from "../generated/autogenerated-client";
import { MsalService } from "@azure/msal-angular";


@Injectable({
  providedIn: 'root',
})
export class SignalRService {
  private hubConnection: signalR.HubConnection;
  private connectionIsStarted: boolean = false;

  constructor(private readonly configService:ConfigurationLoaderService, private readonly msalService: MsalService) {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl(configService.apiBaseUrl+'/signalr/all', {
        accessTokenFactory: async () => {
          const tokenResponse = await this.msalService.acquireTokenSilent({

            scopes: ["api://7e4b8c41-76fd-4f2e-84f7-fbf7541f685b/test"]
          });
          return (await firstValueFrom(tokenResponse)).accessToken
        }
      })
      .build();
  }

  connectToHub(): Observable<void> {
    if (this.connectionIsStarted) {
      return new Observable<void>((observer) => {
        observer.next();
        observer.complete();
      });
    } else {
      return this.startConncetion();
    }
  }

  private startConncetion(): Observable<void> {
    return new Observable<void>((observer) => {
      this.hubConnection
        .start()
        .then(() => {
          console.log('Connection established with SignalR hub');
          this.connectionIsStarted = true;
          observer.next();
          observer.complete();
        })
        .catch((error) => {
          console.error('Error connecting to SignalR hub:', error);
          observer.error(error);
        });
    });
  }

  receiveMessage(): Observable<string> {
    return new Observable<string>((observer) => {
      this.hubConnection.on('MeasureMessages', (message: string) => {
        observer.next(message);
      });
    });
  }

  sendMessage(message: string): void {
    this.hubConnection.invoke('SendMessage', "aseased", message);
  }
}