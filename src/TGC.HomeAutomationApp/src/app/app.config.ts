import { provideHttpClient, withInterceptorsFromDi, withFetch, HTTP_INTERCEPTORS } from "@angular/common/http";
import { ApplicationConfig, importProvidersFrom, inject, provideAppInitializer, provideZoneChangeDetection } from "@angular/core";
import { BrowserModule } from "@angular/platform-browser";
import { provideAnimations } from "@angular/platform-browser/animations";
import { MsalInterceptor, MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG, MsalService, MsalGuard, MsalBroadcastService } from "@azure/msal-angular";
import { MSALInstanceFactory, MSALGuardConfigFactory, MSALInterceptorConfigFactory } from "./app.auth.config";
import { AppRoutingModule } from "./app-routing.module";
import { ConfigurationLoaderService } from "./services/ConfigurationLoaderService";
import { API_BASE_URL } from "./generated/autogenerated-client";

export const appConfig: ApplicationConfig = {
  providers: [
    ConfigurationLoaderService,
    provideAppInitializer(() => {
      var configurationService = inject(ConfigurationLoaderService);
      return configurationService.init();
    }),
    provideZoneChangeDetection({ eventCoalescing: true }),
    importProvidersFrom(
      BrowserModule,
      AppRoutingModule
    ),
    provideHttpClient(withInterceptorsFromDi(), withFetch()),
    provideAnimations(),
    {
      provide: API_BASE_URL,
      useFactory: (configService: ConfigurationLoaderService) => configService.apiBaseUrl,
      deps:[ConfigurationLoaderService]
    },
    {
      provide: HTTP_INTERCEPTORS,
      useClass: MsalInterceptor,
      multi: true,
    },
    {
      provide: MSAL_INSTANCE,
      useFactory: MSALInstanceFactory,
      deps:[ConfigurationLoaderService]
    },
    {
      provide: MSAL_GUARD_CONFIG,
      useFactory: MSALGuardConfigFactory
    },
    {
      provide: MSAL_INTERCEPTOR_CONFIG,
      useFactory: MSALInterceptorConfigFactory
    },
    MsalService,
    MsalGuard,
    MsalBroadcastService,
  ],
};
