import { Component, EventEmitter, OnInit } from '@angular/core';
import { ApexOptions, NgApexchartsModule } from 'ng-apexcharts';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { DeviceClient, DeviceOrderedMeasureRangeResponse, DeviceResponse, MeasureClient, OrderedMeasureResponse } from 'src/app/generated/autogenerated-client';
import { LineChartComponent, LineChartData } from "../charts/line-chart/line-chart.component";
import { DateTimeComponent } from "../date-time/date-time.component";

@Component({
  selector: 'app-single-device-chart',
  templateUrl: './single-device-chart.component.html',
  styleUrls: ['./single-device-chart.component.scss'],
  imports: [NgApexchartsModule, SharedModule, LineChartComponent, DateTimeComponent],
  providers: [DeviceClient, MeasureClient],
  standalone: true
})

export class DeviceChartComponent implements OnInit {
  devices: DeviceResponse[] = [];
  chartData: LineChartData[] = [];
  availableMeasureTypes: string[] = [];
  measureTypeValue: string = 'temperature';
  selectedDeviceId: string = '';
  chartOptions: Partial<ApexOptions> = {};

  startDate: Date = new Date();
  endDate: Date = new Date();

  constructor(
    private readonly deviceClient:DeviceClient,
    private readonly measureClient:MeasureClient
  ) {
    this.startDate = new Date(this.endDate.getTime() - 24 * 60 * 60 * 1000);
  }

  ngOnInit(): void {
    this.fetchDevices();
  }

  fetchDevices() {
    this.deviceClient.getAllDevices().subscribe(data => {
      this.devices = data;

      if (this.devices.length > 0) {
        this.selectedDeviceId = this.devices[0].id!;
        this.measureTypeValue = 'temperature';
        this.fetchDeviceData();
      }
    })
  }

  onDeviceChange():void {
    if (this.selectedDeviceId) {
      this.fetchDeviceMeasureTypes();
      this.fetchDeviceData();
    }
  }

  onMeasureTypeChange():void{
    this.fetchDeviceData();
  }

  onDateChange(date:Date):void{
    this.fetchDeviceData();
  }

  fetchDeviceMeasureTypes(){
    this.deviceClient.getAvailableMeasuresByDeviceId(this.selectedDeviceId).subscribe(response => {
      this.availableMeasureTypes = response.measureTypes ?? [];

      if (this.availableMeasureTypes.length > 0) {
        this.measureTypeValue = this.availableMeasureTypes[0];
      }
    })
  }

  fetchDeviceData() {
    this.measureClient.getMeasuresByDeviceIdAndDate(this.selectedDeviceId, this.startDate, this.endDate).subscribe(response => {
      let some = this.groupMeasurementsByType(response.measures!)
      this.chartData = some;
    })
  }

  groupMeasurementsByType(measurements: OrderedMeasureResponse[]):LineChartData[] {
    const grouped: { [key: string]: { x: Date; y: number }[] } = {};

    for (const m of measurements) {
      if (!grouped[m.type!]) {
        grouped[m.type!] = [];
      }
      grouped[m.type!].push({ x: m.created!, y: m.dataValue! });
    }

    return Object.keys(grouped).map(type => ({
      name: type,
      data: grouped[type]
    })) as LineChartData[];
  }


  subtractTime(date: Date, duration: string): Date {
    const regex = /^(\d+)([smhdw])$/; // supports seconds, minutes, hours, days, weeks
    const match = duration.match(regex);

    if (!match) {
      throw new Error("Invalid duration format. Use formats like '15m', '2h', '3d', etc.");
    }

    const value = parseInt(match[1], 10);
    const unit = match[2];

    let milliseconds = 0;

    switch (unit) {
      case 's': milliseconds = value * 1000; break;
      case 'm': milliseconds = value * 60 * 1000; break;
      case 'h': milliseconds = value * 60 * 60 * 1000; break;
      case 'd': milliseconds = value * 24 * 60 * 60 * 1000; break;
      case 'w': milliseconds = value * 7 * 24 * 60 * 60 * 1000; break;
      default: throw new Error("Unsupported time unit.");
    }

    return new Date(date.getTime() - milliseconds);
  }

}
