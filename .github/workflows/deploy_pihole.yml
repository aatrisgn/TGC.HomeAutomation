name: Deploy PIHole

on: 
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  create_secret:
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/pihole

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.HOMEAUTOMATION_DEV_CLIENT_ID }}
        tenant-id: ${{ secrets.HOMEAUTOMATION_DEV_TENANT_ID }}
        subscription-id: ${{ secrets.HOMEAUTOMATION_DEV_SUBSCRIPTION_ID }}
        ARM_USE_AZUREAD: true

    - name: Install Terraform
      run: bash "${{ github.workspace }}/.github/scripts/install_terraform.sh" 

    - name: Terraform Fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: |
          terraform init \
          -backend-config=resource_group_name="${{secrets.HOMEAUTOMATION_DEV_TFSTATE_RESOURCE_GROUP_NAME}}" \
          -backend-config=storage_account_name="${{ secrets.HOMEAUTOMATION_DEV_TFSTATE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config=container_name="${{ secrets.HOMEAUTOMATION_DEV_TFSTATE_STORAGE_CONTAINER_NAME }}" \
          -backend-config=key="pihole.dev.tfstate"
          
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var-file="envs/dev.tfvars" -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
  
  deploy_application:
    environment: dev
    runs-on: [self-hosted, pihole]
    needs: [create_secret]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.HOMEAUTOMATION_DEV_CLIENT_ID }}
        tenant-id: ${{ secrets.HOMEAUTOMATION_DEV_TENANT_ID }}
        subscription-id: ${{ secrets.HOMEAUTOMATION_DEV_SUBSCRIPTION_ID }}

    - name: Fetch secret from Key Vault
      id: get_secret
      run: |
        secret=$(az keyvault secret show --vault-name "tgckvhadev" --name "PiholeAdminPassword" --query "value" -o tsv)
        echo "::add-mask::$secret"
        echo "PiHoleAdmin=$secret" >> $GITHUB_ENV

    - run: |
        ansible-playbook ./ansible/roles/pihole/playbooks/configure_pihole.yml --extra-vars "password=$PiHoleAdmin"
      name: "Run Ansible Playbook"