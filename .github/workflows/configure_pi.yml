name: Configure self-hosted runners

on: 
  push:
    branches:
      - main
    paths:
    - '.github/workflows/configure_pi.yml'
    - 'terraform/runner_identity/**'
    #- 'ansible/roles/pi/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  create_identity:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ./terraform/runner_identity
    
    env:
      ARM_CLIENT_ID: "${{ secrets.HOMEAUTOMATION_DEV_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.HOMEAUTOMATION_DEV_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.HOMEAUTOMATION_DEV_TENANT_ID }}"
      ARM_USE_AZUREAD: true

    steps:
    - uses: actions/checkout@v3

    - name: Install Terraform
      run: bash "${{ github.workspace }}/.github/scripts/install_terraform.sh" 

    - name: Terraform Fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config=resource_group_name="${{secrets.HOMEAUTOMATION_DEV_TFSTATE_RESOURCE_GROUP_NAME}}" \
        -backend-config=storage_account_name="${{ secrets.HOMEAUTOMATION_DEV_TFSTATE_STORAGE_ACCOUNT_NAME }}" \
        -backend-config=container_name="${{ secrets.HOMEAUTOMATION_DEV_TFSTATE_STORAGE_CONTAINER_NAME }}" \
        -backend-config=key="runner_identity.dev.tfstate"
        
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var="tenant_id=${{ secrets.HOMEAUTOMATION_DEV_TENANT_ID }}" -var-file="envs/dev.tfvars" -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  configure_tools:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ rasp01, rasp02 ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    # - run: |
    #     echo "Installing Ansible..."

    #     echo "Running: apt -y install software-properties-common"
    #     sudo apt -y install software-properties-common

    #     echo "Running: apt-get -y install python3-launchpadlib"
    #     sudo apt-get -y install python3-launchpadlib

    #     echo "Running: apt-add-repository --yes --update ppa:ansible/ansible"
    #     sudo apt-add-repository --yes --update ppa:ansible/ansible

    #     echo "Running: apt -y install ansible"
    #     sudo apt -y install ansible

    #     echo "Removing ansible repository again"
    #     sudo add-apt-repository -r https://ppa.launchpadcontent.net/ansible/ansible/ubuntu/

    #     echo "Finished installing!"
    #   name: "Install Ansible"

    - run: |
        echo "Intalling Python..."
        sudo apt update && sudo apt upgrade -y
        sudo apt install python3 python3-pip -y
        echo "Installed Python"

        echo "Creating venv..."
        mkdir ~/pythonenvs
        python3 -m venv ~/pythonenvs/ansible_venv
        echo "venv created."

        source ~/pythonenvs/ansible-venv/bin/activate
        ansible --version
      name: "Install Ansible"
    
    - run: |
        source ~/pythonenvs/ansible-venv/bin/activate
        ansible-playbook ./ansible/roles/pi/playbooks/configure_tools.yml
        deactivate
      name: "Run Ansible Playbook"

  configure_identity:
    environment: dev
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ rasp01, rasp02 ]
    needs: [configure_tools, create_identity]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.HOMEAUTOMATION_DEV_CLIENT_ID }}
        tenant-id: ${{ secrets.HOMEAUTOMATION_DEV_TENANT_ID }}
        subscription-id: ${{ secrets.HOMEAUTOMATION_DEV_SUBSCRIPTION_ID }}
        
    - name: Fetch secret from Key Vault
      id: get_secret
      run: |
        secret=$(az keyvault secret show --vault-name "tgckvhadev" --name "${{ runner.name }}ClientId" --query "value" -o tsv)
        echo "::add-mask::$secret"
        echo "RunnerClientId=$secret" >> $GITHUB_ENV

        secret=$(az keyvault secret show --vault-name "tgckvhadev" --name "${{ runner.name }}Password" --query "value" -o tsv)
        echo "::add-mask::$secret"
        echo "RunnerPassword=$secret" >> $GITHUB_ENV
    
    - run: |
        ansible-playbook ./ansible/roles/pi/playbooks/setup_identity.yml --extra-vars "tenantid=${{ secrets.HOMEAUTOMATION_DEV_TENANT_ID }} clientid=$RunnerClientId secret=$RunnerPassword"
      name: "Run Ansible Playbook"
  