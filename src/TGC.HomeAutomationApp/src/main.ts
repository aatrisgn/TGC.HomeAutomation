import { enableProdMode, importProvidersFrom, inject, provideAppInitializer } from '@angular/core';
import { environment } from './environments/environment';
import { BrowserModule, bootstrapApplication } from '@angular/platform-browser';
import { AppRoutingModule } from './app/app-routing.module';
import { provideAnimations } from '@angular/platform-browser/animations';
import { AppComponent } from './app/app.component';
import { API_BASE_URL } from './app/generated/autogenerated-client';
import { provideHttpClient } from '@angular/common/http';
import { ConfigurationLoaderService } from './app/services/ConfigurationLoaderService';

if (environment.production) {
  enableProdMode();
}

export function initializeApp(configService: ConfigurationLoaderService): () => Promise<any> {
  return () => configService.loadConfig();
}


bootstrapApplication(AppComponent, {
  providers: [
    importProvidersFrom(BrowserModule, AppRoutingModule),
    provideAppInitializer(() => {
      const configService: ConfigurationLoaderService = inject(ConfigurationLoaderService);
      return configService.loadConfig();
    }),
    provideHttpClient(),
    provideAnimations(),
    {
      provide: API_BASE_URL,
      useFactory: (configService: ConfigurationLoaderService) => configService.apiBaseUrl,
      deps:[ConfigurationLoaderService]
    }
  ]
}).catch((err) => console.error(err));
