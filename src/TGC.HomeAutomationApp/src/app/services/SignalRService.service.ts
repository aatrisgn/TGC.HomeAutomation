import { Injectable } from "@angular/core";
import * as signalR from '@microsoft/signalr';
import { Observable } from 'rxjs';
import { ConfigurationLoaderService } from "./ConfigurationLoaderService";
import { MeasureRequest } from "../generated/autogenerated-client";


@Injectable({
  providedIn: 'root',
})
export class SignalRService {
  private hubConnection: signalR.HubConnection;

  constructor(private readonly configService:ConfigurationLoaderService) {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl(configService.apiBaseUrl+'/signalr/all')
      .build();
  }

  startConnection(): Observable<void> {
    return new Observable<void>((observer) => {
      this.hubConnection
        .start()
        .then(() => {
          console.log('Connection established with SignalR hub');
          observer.next();
          observer.complete();
        })
        .catch((error) => {
          console.error('Error connecting to SignalR hub:', error);
          observer.error(error);
        });
    });
  }

  receiveMessage(): Observable<string> {
    return new Observable<string>((observer) => {
      this.hubConnection.on('MeasureMessages', (message: string) => {
        observer.next(message);
      });
    });
  }

  sendMessage(message: string): void {
    this.hubConnection.invoke('SendMessage', "aseased", message);
  }
}